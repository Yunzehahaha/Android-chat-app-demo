apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-allopen'
apply plugin: 'kotlin-noarg'
apply plugin: 'androidx.navigation.safeargs'


def localPropFile = rootProject.file("local.properties")
def localProp = new Properties()
localProp.load(new FileInputStream(localPropFile))


allOpen { annotation 'com.artf.chatapp.testing.OpenClass' }
noArg { annotation 'com.artf.chatapp.testing.NoArgClass' }
android {
    signingConfigs {
        config {
            keyAlias localProp['keyAlias']
            keyPassword localProp['keyPassword']
            //storeFile file(localProp['storeFile'])
            storePassword localProp['storePassword']
        }
    }
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.artf.chatapp"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        String debugDir = 'src/debug/java'
        main.java.srcDirs += debugDir
        test.java.srcDirs += sharedTestDir
        androidTest.java.srcDirs += sharedTestDir
    }
    buildTypes {
        debug {
          //  resValue "string", "facebook_application_id", localProp['facebook_application_id']
           // resValue "string", "facebook_login_protocol_scheme", localProp['facebook_login_protocol_scheme']
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
         //   resValue "string", "facebook_application_id", localProp['facebook_application_id']
         //   resValue "string", "facebook_login_protocol_scheme", localProp['facebook_login_protocol_scheme']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dataBinding.enabled = true
    kotlinOptions.jvmTarget = "1.8"
    testOptions {
        animationsDisabled = true
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin"
    implementation "androidx.appcompat:appcompat:$versions.support"
    implementation "androidx.core:core-ktx:$versions.core_ktx"
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraint_layout"
    implementation "androidx.fragment:fragment-ktx:$versions.fragment"
    implementation "com.google.android.material:material:$versions.material"

    //Firebase
    implementation "com.google.firebase:firebase-auth:$versions.firebase_auth"
    implementation "com.google.firebase:firebase-config:$versions.firebase_config"
    implementation "com.google.firebase:firebase-database:$versions.firebase_database"
    implementation "com.google.firebase:firebase-firestore:$versions.firebase_firestore"
    implementation "com.google.firebase:firebase-core:$versions.firebase_core"
    implementation "com.google.firebase:firebase-messaging:$versions.firebase_messaging"
    implementation "com.google.firebase:firebase-storage:$versions.firebase_storage"
    implementation "com.firebaseui:firebase-ui-auth:$versions.firebase_ui_auth"
    implementation "com.facebook.android:facebook-android-sdk:$versions.facebook"
    implementation 'com.google.guava:guava:29.0-jre'

    //Glide
    implementation "com.github.bumptech.glide:glide:$versions.glide"

    //Nav
    implementation "org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin"
    implementation "androidx.navigation:navigation-fragment-ktx:$versions.navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$versions.navigation"

    //Lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:$versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle"

    //Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutine"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.coroutine"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:$versions.coroutine"

    //Dagger
    implementation "com.google.dagger:dagger:$versions.dagger"
    implementation "com.google.dagger:dagger-android:$versions.dagger"
    implementation "com.google.dagger:dagger-android-support:$versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"
    kapt "com.google.dagger:dagger-android-processor:$versions.dagger"

    //Worker
    implementation "androidx.work:work-runtime-ktx:$versions.work"

    //Moshi
    implementation "com.squareup.moshi:moshi-kotlin:$versions.moshi"
    implementation "com.squareup.moshi:moshi:$versions.moshi"

    //Test
    testImplementation "androidx.arch.core:core-testing:$versions.arch_core"
    testImplementation "com.google.truth:truth:$versions.truth"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutine"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutine"
    testImplementation "org.mockito:mockito-core:$versions.mockito"
    testImplementation "org.mockito:mockito-inline:$versions.mockito"
    testImplementation "junit:junit:$versions.junit"
    testImplementation "org.robolectric:annotations:$versions.robolectric"
    testImplementation "org.robolectric:robolectric:$versions.robolectric"

    //Android Test
    implementation("androidx.fragment:fragment-testing:$versions.fragment", {
        exclude group: 'androidx.test', module: 'core'
    })
    implementation "androidx.fragment:fragment-ktx:$versions.fragment"
    androidTestImplementation "androidx.arch.core:core-testing:$versions.arch_core"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:$versions.espresso"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$versions.espresso"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.espresso"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$versions.espresso"
    androidTestImplementation "androidx.test.ext:junit-ktx:$versions.atsl_junit"
    androidTestImplementation "androidx.test.ext:junit:$versions.atsl_junit"
    androidTestImplementation "androidx.test:core-ktx:$versions.atsl_core"
    androidTestImplementation "androidx.test:core:$versions.atsl_core"
    androidTestImplementation "androidx.test:monitor:$versions.atsl_monitor"
    androidTestImplementation "androidx.test:rules:$versions.atsl_rules"
    androidTestImplementation "androidx.test:runner:$versions.atsl_runner"
    androidTestImplementation "androidx.work:work-testing:$versions.work"
    androidTestImplementation "com.google.truth:truth:$versions.truth"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutine"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutine"
    androidTestImplementation "org.mockito:mockito-android:$versions.mockito"
    androidTestImplementation "org.mockito:mockito-core:$versions.mockito"
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
}
apply plugin: 'com.google.gms.google-services'
